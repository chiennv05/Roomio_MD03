import { ApiRoom } from '../types/Room';
import { getImageUrl } from '../configs'; // Import h√†m t·∫°o URL h√¨nh ·∫£nh t·ª´ config
import { Room } from '../types/Room';

// Interface ƒë·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu cho component RoomCard
export interface RoomCardData {
  image: string; // H√¨nh ·∫£nh ch√≠nh
  images: string[]; // Danh s√°ch t·∫•t c·∫£ h√¨nh ·∫£nh
  price: string; // Gi√° ph√≤ng ƒë√£ format
  title: string; // Ti√™u ƒë·ªÅ ph√≤ng
  detail: string; // Th√¥ng tin chi ti·∫øt (di·ªán t√≠ch, ƒë·ªãa ch·ªâ)
}

// H√†m chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API sang format ph√π h·ª£p cho UI
export const convertApiRoomToRoom = (apiRoom: ApiRoom): RoomCardData => {
  // Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi th√†nh URL ƒë·∫ßy ƒë·ªß cho h√¨nh ·∫£nh
  const images = apiRoom.photos.map(photo => getImageUrl(photo));
  
  // Format gi√° ti·ªÅn theo ƒë·ªãnh d·∫°ng Vi·ªát Nam (c√≥ d·∫•u ph·∫©y ngƒÉn c√°ch)
  const formattedPrice = `${apiRoom.rentPrice.toLocaleString('vi-VN')} VNƒê/th√°ng`;
  
  // T·∫°o chu·ªói th√¥ng tin chi ti·∫øt g·ªìm di·ªán t√≠ch v√† ƒë·ªãa ch·ªâ
  const detail = `${apiRoom.area}m¬≤ ‚Ä¢ ${apiRoom.location.addressText}`;
  
  // T·∫°o ti√™u ƒë·ªÅ t·ª´ m√¥ t·∫£ ho·∫∑c s·ªë ph√≤ng n·∫øu kh√¥ng c√≥ m√¥ t·∫£
  const title = apiRoom.description || `Ph√≤ng tr·ªç ${apiRoom.roomNumber}`;
  
  return {
    image: images[0] || 'https://via.placeholder.com/300x200', // H√¨nh ƒë·∫ßu ti√™n l√†m h√¨nh ch√≠nh
    images: images.length > 0 ? images : ['https://via.placeholder.com/300x200'], // Danh s√°ch h√¨nh ho·∫∑c h√¨nh m·∫∑c ƒë·ªãnh
    price: formattedPrice,
    title: title,
    detail: detail,
  };
};

// H√†m format gi√° ti·ªÅn theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
export const formatPrice = (price: number): string => {
  return `${price.toLocaleString('vi-VN')} ƒë·ªìng`;
};

// H√†m format di·ªán t√≠ch v·ªõi ƒë∆°n v·ªã m¬≤
export const formatArea = (area: number): string => {
  return `${area}m¬≤`;
};

// H√†m t·∫°o URL ƒë·∫ßy ƒë·ªß cho h√¨nh ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
export const getFullImageUrl = (relativePath: string): string => {
  return getImageUrl(relativePath);
};

// Utility function ƒë·ªÉ validate room theo logic AND
export const validateRoomByFilters = (
  room: Room,
  selectedAmenities: string[],
  selectedFurniture: string[],
  selectedRegions: string[] = [],
  priceRange?: { min: number; max: number },
  areaRange?: { min: number; max: number }
): boolean => {
  // N·∫øu kh√¥ng c√≥ filter n√†o ƒë∆∞·ª£c ch·ªçn, hi·ªÉn th·ªã t·∫•t c·∫£
  if (selectedAmenities.length === 0 && 
      selectedFurniture.length === 0 && 
      selectedRegions.length === 0 && 
      !priceRange && 
      !areaRange) {
    return true;
  }

  // Ki·ªÉm tra regions/districts - ph·∫£i thu·ªôc m·ªôt trong c√°c khu v·ª±c ƒë∆∞·ª£c ch·ªçn
  if (selectedRegions.length > 0) {
    const roomDistrict = room.location.district;
    const roomProvince = room.location.province;
    
    // Ki·ªÉm tra xem ph√≤ng c√≥ thu·ªôc khu v·ª±c ƒë∆∞·ª£c ch·ªçn kh√¥ng
    const isInSelectedRegion = selectedRegions.some(region => {
      // So s√°nh v·ªõi district ho·∫∑c province c·ªßa ph√≤ng
      return roomDistrict?.toLowerCase().includes(region.toLowerCase()) ||
             roomProvince?.toLowerCase().includes(region.toLowerCase()) ||
             region.toLowerCase().includes(roomDistrict?.toLowerCase() || '') ||
             region.toLowerCase().includes(roomProvince?.toLowerCase() || '');
    });
    
    if (!isInSelectedRegion) {
      return false;
    }
  }

  // Ki·ªÉm tra price range
  if (priceRange) {
    if (room.rentPrice < priceRange.min || room.rentPrice > priceRange.max) {
      return false;
    }
  }

  // Ki·ªÉm tra area range
  if (areaRange) {
    if (room.area < areaRange.min || room.area > areaRange.max) {
      return false;
    }
  }

  // Ki·ªÉm tra amenities - ph·∫£i c√≥ T·∫§T C·∫¢ amenities ƒë∆∞·ª£c ch·ªçn
  if (selectedAmenities.length > 0) {
    const hasAllAmenities = selectedAmenities.every(amenity => 
      room.amenities.includes(amenity)
    );
    if (!hasAllAmenities) {
      return false;
    }
  }

  // Ki·ªÉm tra furniture - ph·∫£i c√≥ T·∫§T C·∫¢ furniture ƒë∆∞·ª£c ch·ªçn  
  if (selectedFurniture.length > 0) {
    const hasAllFurniture = selectedFurniture.every(furniture => 
      room.furniture.includes(furniture)
    );
    if (!hasAllFurniture) {
      return false;
    }
  }

  return true;
};

// Debug function ƒë·ªÉ log chi ti·∫øt v·ªÅ vi·ªác filter
export const debugRoomFilter = (
  room: Room,
  selectedAmenities: string[],
  selectedFurniture: string[],
  selectedRegions: string[] = [],
  priceRange?: { min: number; max: number },
  areaRange?: { min: number; max: number }
) => {
  console.log(`üè† Room ${room.roomNumber}:`);
  console.log(`   üìç Location: ${room.location.district}, ${room.location.province}`);
  console.log(`   üí∞ Price: ${room.rentPrice.toLocaleString()}ƒë`);
  console.log(`   üìê Area: ${room.area}m¬≤`);
  console.log(`   üìã Available amenities: [${room.amenities.join(', ')}]`);
  console.log(`   üõãÔ∏è Available furniture: [${room.furniture.join(', ')}]`);
  console.log(`   üîç Required regions: [${selectedRegions.join(', ')}]`);
  console.log(`   üîç Required amenities: [${selectedAmenities.join(', ')}]`);
  console.log(`   üîç Required furniture: [${selectedFurniture.join(', ')}]`);
  if (priceRange) console.log(`   üîç Price range: ${priceRange.min.toLocaleString()} - ${priceRange.max.toLocaleString()}ƒë`);
  if (areaRange) console.log(`   üîç Area range: ${areaRange.min} - ${areaRange.max}m¬≤`);
  
  const regionMatch = selectedRegions.length === 0 || selectedRegions.some(region => {
    const roomDistrict = room.location.district?.toLowerCase() || '';
    const roomProvince = room.location.province?.toLowerCase() || '';
    const searchRegion = region.toLowerCase();
    return roomDistrict.includes(searchRegion) || 
           roomProvince.includes(searchRegion) ||
           searchRegion.includes(roomDistrict) ||
           searchRegion.includes(roomProvince);
  });
  
  const priceMatch = !priceRange || (room.rentPrice >= priceRange.min && room.rentPrice <= priceRange.max);
  const areaMatch = !areaRange || (room.area >= areaRange.min && room.area <= areaRange.max);
  const amenitiesMatch = selectedAmenities.length === 0 || 
    selectedAmenities.every(amenity => room.amenities.includes(amenity));
  const furnitureMatch = selectedFurniture.length === 0 || 
    selectedFurniture.every(furniture => room.furniture.includes(furniture));
  
  console.log(`   ‚úÖ Region match: ${regionMatch}`);
  console.log(`   ‚úÖ Price match: ${priceMatch}`);
  console.log(`   ‚úÖ Area match: ${areaMatch}`);
  console.log(`   ‚úÖ Amenities match: ${amenitiesMatch}`);
  console.log(`   ‚úÖ Furniture match: ${furnitureMatch}`);
  console.log(`   üìä Should show: ${regionMatch && priceMatch && areaMatch && amenitiesMatch && furnitureMatch}`);
  console.log('   ---');
};

// Format room data for display
export const formatRoomData = (room: Room) => {
  return {
    id: room._id,
    roomNumber: room.roomNumber,
    area: room.area,
    rentPrice: room.rentPrice,
    amenities: room.amenities,
    furniture: room.furniture,
    location: room.location.addressText,
  };
}; 