import {Alert} from 'react-native';
import {AppDispatch} from '../../../../store';
import {
  generateContractPDF,
  uploadContractImages,
} from '../../../../store/slices/contractSlice';
import {ImageFile} from '../../../../store/services/uploadService';
import ImagePicker from 'react-native-image-crop-picker';
import {StackNavigationProp} from '@react-navigation/stack';
import {RootStackParamList} from '../../../../types/route';
import {Contract} from '../../../../types';

// X·ª≠ l√Ω xem PDF
export const handleViewPDF = async (
  contract: Contract,
  contractId: string,
  dispatch: AppDispatch,
  navigation: StackNavigationProp<RootStackParamList>,
  setGeneratingPDF: (value: boolean) => void, // üëà th√™m tham s·ªë n√†y
) => {
  if (contract.status === 'draft') {
    try {
      setGeneratingPDF(true); // üëà b·∫Øt ƒë·∫ßu loading

      const response = await dispatch(generateContractPDF(contractId)).unwrap();

      if (response.success && response.data?.viewPdfUrl) {
        navigation.navigate('PdfViewer', {pdfUrl: response.data.viewPdfUrl});
      } else {
        Alert.alert('Th√¥ng b√°o', 'Kh√¥ng th·ªÉ t·∫°o file PDF h·ª£p ƒë·ªìng.');
      }
    } catch (error: any) {
      console.error('Error generating PDF:', error);
      Alert.alert(
        'L·ªói',
        error?.message || 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o file PDF h·ª£p ƒë·ªìng.',
      );
    } finally {
      setGeneratingPDF(false); // üëà k·∫øt th√∫c loading
    }
  } else {
    if (contract.contractPdfUrl) {
      navigation.navigate('PdfViewer', {pdfUrl: contract.contractPdfUrl});
    } else {
      Alert.alert('Th√¥ng b√°o', 'H·ª£p ƒë·ªìng ch∆∞a c√≥ file PDF.');
    }
  }
};

// X·ª≠ l√Ω upload ·∫£nh t·ª´ camera
export const handleCameraUpload = async (
  contractId: string,
  dispatch: AppDispatch,
  append: boolean,
) => {
  try {
    const image = await ImagePicker.openCamera({
      width: 1000,
      height: 1000,
      cropping: true,
      includeBase64: false,
      includeExif: false,
    });

    console.log('Selected image from camera:', {
      path: image.path,
      mime: image.mime,
      size: image.size,
    });

    if (!image.path || !image.mime) {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ·∫£nh');
      return;
    }

    const imageFile: ImageFile = {
      path: image.path,
      mime: image.mime,
      filename: image.path.split('/').pop() || `camera_${Date.now()}.jpg`,
    };

    console.log('Image file prepared:', imageFile);
    await uploadImages(contractId, [imageFile], dispatch, append);
  } catch (e: any) {
    console.error('Camera error:', e);
    if (e.code !== 'E_PICKER_CANCELLED') {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ truy c·∫≠p m√°y ·∫£nh');
    }
  }
};

// X·ª≠ l√Ω upload ·∫£nh t·ª´ th∆∞ vi·ªán
export const handleGalleryUpload = async (
  contractId: string,
  dispatch: AppDispatch,
  append: boolean,
) => {
  try {
    const selectedImages = await ImagePicker.openPicker({
      multiple: true,
      maxFiles: 3,
      mediaType: 'photo',
      includeBase64: false,
      includeExif: false,
    });

    const imageArray = Array.isArray(selectedImages)
      ? selectedImages
      : [selectedImages];

    const imageFiles: ImageFile[] = imageArray.map(img => ({
      path: img.path,
      mime: img.mime,
      filename: img.path.split('/').pop() || `gallery_${Date.now()}.jpg`,
    }));

    await uploadImages(contractId, imageFiles, dispatch, append);
  } catch (e: any) {
    console.error('Gallery error:', e);
    if (e.code !== 'E_PICKER_CANCELLED') {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ truy c·∫≠p th∆∞ vi·ªán');
    }
  }
};

// H√†m upload ·∫£nh chung
const uploadImages = async (
  contractId: string,
  imageFiles: ImageFile[],
  dispatch: AppDispatch,
  append: boolean,
) => {
  try {
    const result = await dispatch(
      uploadContractImages({
        contractId,
        images: imageFiles,
        append,
      }),
    ).unwrap();

    Alert.alert(
      'Th√†nh c√¥ng',
      result.message ||
        'Upload ·∫£nh h·ª£p ƒë·ªìng th√†nh c√¥ng. H·ª£p ƒë·ªìng ƒëang ch·ªù admin ph√™ duy·ªát.',
    );
  } catch (error: any) {
    console.error('Upload error:', error);
    Alert.alert('L·ªói', error);
  }
};

// X·ª≠ l√Ω ch·ªçn ·∫£nh ƒë·ªÉ upload
// utils/contractEvents.ts

export const handlePickImages = (
  selectedContract: any,
  contractId: string,
  dispatch: AppDispatch,
) => {
  if (
    !selectedContract ||
    (selectedContract.status !== 'pending_signature' &&
      selectedContract.status !== 'pending_approval')
  ) {
    Alert.alert('Th√¥ng b√°o', 'Ch·ªâ c√≥ th·ªÉ upload ·∫£nh khi h·ª£p ƒë·ªìng ƒëang ch·ªù k√Ω');
    return;
  }

  const existingCount = selectedContract.signedContractImages?.length ?? 0;

  // N·∫øu ch∆∞a c√≥ ·∫£nh n√†o, c·ª© m·ªü picker lu√¥n ·ªü ch·∫ø ƒë·ªô append
  if (existingCount === 0) {
    handleGalleryUpload(contractId, dispatch, true);
    return;
  }

  // Ng∆∞·ª£c l·∫°i, h·ªèi th√™m hay thay th·∫ø
  Alert.alert(
    'Upload ·∫£nh h·ª£p ƒë·ªìng',
    'B·∫°n mu·ªën th√™m ·∫£nh m·ªõi hay thay th·∫ø to√†n b·ªô ·∫£nh c≈©?',
    [
      {
        text: 'Th√™m ·∫£nh',
        onPress: () => handleGalleryUpload(contractId, dispatch, true),
      },
      {
        text: 'Thay th·∫ø to√†n b·ªô ·∫£nh',
        onPress: () => handleGalleryUpload(contractId, dispatch, false),
      },
      {text: 'H·ªßy', style: 'cancel'},
    ],
  );
};
