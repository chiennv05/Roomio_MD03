import axios, {
  AxiosError,
  AxiosHeaders,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
} from 'axios';

import { Platform } from 'react-native';
import EncryptedStorage from 'react-native-encrypted-storage';
import { API_CONFIG, APP_CONFIG } from '../configs';


// ===== Ki·ªÉu d·ªØ li·ªáu =====
type ApiResponse<T = any> = AxiosResponse<T>;

type ApiError = {
  isError: true;
  message: string;
  status?: number;
  data?: any;
};

type ApiResult<T = any> = ApiResponse<T> | ApiError;

// ===== C·∫•u h√¨nh m·∫∑c ƒë·ªãnh =====
const commonConfigs: AxiosRequestConfig = {
  baseURL: `${API_CONFIG.BASE_URL}/`,
  timeout: API_CONFIG.TIMEOUT,
  headers: {
    buildversion: APP_CONFIG.BUILD_VERSION,
    buildnumber: APP_CONFIG.BUILD_NUMBER,
    platform: Platform.OS,
  },
};

const instance: AxiosInstance = axios.create(commonConfigs);

// ===== Request Interceptor: t·ª± ƒë·ªông g·∫Øn token n·∫øu c√≥ =====
instance.interceptors.request.use(
  async config => {
    try {
      const session = await EncryptedStorage.getItem('user_session');
      if (session) {
        const { token, expire } = JSON.parse(session);
        const isExpired = new Date(expire) < new Date();

        if (token && !isExpired) {
          // ‚úÖ Chu·∫©n Axios 1.9.0
          const headers = config.headers as AxiosHeaders;
          headers.set('Authorization', `Bearer ${token}`);
        }
      }
    } catch (err) {
      console.warn('Kh√¥ng l·∫•y ƒë∆∞·ª£c token:', err);
    }

    return config;
  },
  error => Promise.reject(error),
);
// ===== Response Interceptor: x·ª≠ l√Ω l·ªói chung =====
instance.interceptors.response.use(
  response => response,
  (error: AxiosError) => {

    const { status } = error.response || {};

    switch (status) {
      case 401:
        console.log('üîí L·ªói x√°c th·ª±c - c√≥ th·ªÉ c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i');
        break;
      case 403:
        console.log('üö´ Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
        break;
      case 404:
        console.log('üîç Kh√¥ng t√¨m th·∫•y t√†i nguy√™n');
        break;
      case 500:
        console.log('üî• L·ªói server n·ªôi b·ªô');
        break;
      default:
        console.log('‚ùóÔ∏è L·ªói kh√¥ng x√°c ƒë·ªãnh');
    }

    return Promise.reject(error);
  },
);

// ===== H√†m x·ª≠ l√Ω k·∫øt qu·∫£ =====
const responseBody = <T>(response: AxiosResponse<T>): ApiResponse<T> =>
  response;


const responseError = (error: AxiosError): ApiError => ({
  isError: true,
  message: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
  status: error.response?.status,
  data: error.response?.data,
});


// ===== API wrapper =====
export const api = {
  get: <T = any>(
    url: string,
    config?: AxiosRequestConfig,
  ): Promise<ApiResult<T>> =>
    instance.get<T>(url, config).then(responseBody).catch(responseError),

  post: <T = any>(
    url: string,
    data?: any,
    config?: AxiosRequestConfig,
  ): Promise<ApiResult<T>> =>
    instance.post<T>(url, data, config).then(responseBody).catch(responseError),

  put: <T = any>(
    url: string,
    data?: any,
    config?: AxiosRequestConfig,
  ): Promise<ApiResult<T>> =>
    instance.put<T>(url, data, config).then(responseBody).catch(responseError),

  delete: <T = any>(
    url: string,
    config?: AxiosRequestConfig,
  ): Promise<ApiResult<T>> =>
    instance.delete<T>(url, config).then(responseBody).catch(responseError),

  patch: <T = any>(
    url: string,
    data?: any,
    config?: AxiosRequestConfig,
  ): Promise<ApiResult<T>> =>
    instance
      .patch<T>(url, data, config)
      .then(responseBody)
      .catch(responseError),
};

export default api;
